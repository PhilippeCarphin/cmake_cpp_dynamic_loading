#+TITLE: c++, dynamic loading, boost python and cmake

* Introduction

* Initial setup


** Toplevel
#+BEGIN_SRC cmake
# CMakeLists.txt
add_executable(spooki_run.out main.cpp)
#+END_SRC

#+BEGIN_SRC c++
// main.cpp
int main(void){
  std::cerr << "C++      : " << __PRETTY_FUNCTION__ << std::endl;
  return 0;
}
#+END_SRC

** Meteo Operations

#+BEGIN_SRC cmake
# meteo_operation/CMakeLists.txt
add_library(meteo_operations SHARED OperationBase.cpp)
#+END_SRC
#+BEGIN_SRC c++
// meteo_operations/OperationBase.h
class OperationBase {
public:

    virtual void algo();
    void base_method();
};
#+END_SRC
#+BEGIN_SRC c++
// meteo_operations/OperationBase.cpp
#include "OperationBase.h"

void OperationBase::algo()
{
    std::cerr << "C++      : " << __PRETTY_FUNCTION__ << std::endl;
    base_method();
}

void OperationBase::base_method()
{
    std::cerr << "C++      : " << __PRETTY_FUNCTION__ << " : ... world!" << std::endl;
}
#+END_SRC

** Plugins

#+BEGIN_SRC cmake
# plugins/AbsoluteValue/CMakeLists.txt
add_library(AbsoluteValue MODULE AbsoluteValue.cpp)
target_link_libraries(
        AbsoluteValue
    PRIVATE
        meteo_operations
)
#+END_SRC

#+BEGIN_SRC c++
// plugins/AbsoluteValue/AbsoluteValue.h
#include "OperationBase.h"
class AbsoluteValue : public OperationBase{

    virtual void algo();

};
#+END_SRC

#+BEGIN_SRC c++
// plugins/AbsoluteValue/AbsoluteValue.cpp
void AbsoluteValue::algo(){
    std::cerr << "C++      : " << __PRETTY_FUNCTION__ << " : Hello ..." << std::endl;
    base_method();
}
#+END_SRC

